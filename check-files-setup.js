const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

const checkSetup = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã —Ñ–∞–π–ª–æ–≤...\n');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã files
  console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã files...');
  const { data: tableData, error: tableError } = await supabase
    .from('files')
    .select('*')
    .limit(1);
  
  if (tableError) {
    console.error('‚ùå –¢–∞–±–ª–∏—Ü–∞ files –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', tableError.message);
  } else {
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ files —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
    if (tableData && tableData.length > 0) {
      const firstRow = tableData[0];
      console.log('   –ö–æ–ª–æ–Ω–∫–∏:', Object.keys(firstRow).join(', '));
      
      if ('tender_id' in firstRow) {
        console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ tender_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('   ‚ùå –ö–æ–ª–æ–Ω–∫–∞ tender_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é!');
      }
      
      if ('document_type' in firstRow) {
        console.log('   ‚úÖ –ö–æ–ª–æ–Ω–∫–∞ document_type —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      } else {
        console.log('   ‚ùå –ö–æ–ª–æ–Ω–∫–∞ document_type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é!');
      }
    } else {
      console.log('   ‚ÑπÔ∏è  –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª–æ–Ω–∫–∏');
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage bucket
  console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Storage bucket "files"...');
  const { data: buckets, error: bucketsError } = await supabase
    .storage
    .listBuckets();
  
  if (bucketsError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ buckets:', bucketsError.message);
  } else {
    const filesBucket = buckets.find(b => b.name === 'files');
    if (filesBucket) {
      console.log('‚úÖ Bucket "files" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('   ID:', filesBucket.id);
      console.log('   Public:', filesBucket.public);
    } else {
      console.log('‚ùå Bucket "files" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å!');
      console.log('\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é bucket:');
      console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ: https://supabase.com/dashboard/project/dauikktsjknklmyonjik/storage/buckets');
      console.log('2. –ù–∞–∂–º–∏—Ç–µ "New bucket"');
      console.log('3. –ù–∞–∑–≤–∞–Ω–∏–µ: files');
      console.log('4. Public bucket: –î–∞ (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã) –∏–ª–∏ –ù–µ—Ç (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)');
      console.log('5. –ù–∞–∂–º–∏—Ç–µ "Create bucket"');
    }
  }
  
  // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
  console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞...');
  const testContent = new Blob(['test'], { type: 'text/plain' });
  const testPath = `test_${Date.now()}.txt`;
  
  const { error: uploadError } = await supabase.storage
    .from('files')
    .upload(testPath, testContent);
  
  if (uploadError) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞:', uploadError.message);
    console.log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('   - Bucket "files" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    console.log('   - –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ Storage Policies)');
  } else {
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω');
    
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    await supabase.storage.from('files').remove([testPath]);
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω');
  }
  
  console.log('\n' + '='.repeat(50));
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
};

checkSetup();
