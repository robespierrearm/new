'use client';

import { useState } from 'react';
import { Tender, STATUS_TRANSITIONS, STATUS_LABELS } from '@/lib/supabase';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { ArrowRight, CheckCircle, XCircle, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

interface TenderStatusChangerProps {
  tender: Tender;
  onStatusChange: (tenderId: number, newStatus: Tender['status'], additionalData?: Partial<Tender>) => Promise<void>;
}

export function TenderStatusChanger({ tender, onStatusChange }: TenderStatusChangerProps) {
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [selectedStatus, setSelectedStatus] = useState<Tender['status'] | null>(null);
  const [submittedPrice, setSubmittedPrice] = useState<string>(''); // –¶–µ–Ω–∞ –ø–æ–¥–∞—á–∏
  const [winPrice, setWinPrice] = useState<string>(''); // –¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã
  const [isProcessing, setIsProcessing] = useState(false);
  const [validationError, setValidationError] = useState<string>('');

  const availableTransitions = STATUS_TRANSITIONS[tender.status];
  const isFinished = availableTransitions.length === 0;

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π —Å—Ç–∞—Ç—É—Å–∞
  const validateTransition = (newStatus: Tender['status']): string | null => {
    // –ù–æ–≤—ã–π ‚Üí –ü–æ–¥–∞–Ω–æ: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (tender.status === '–Ω–æ–≤—ã–π' && newStatus === '–ø–æ–¥–∞–Ω–æ') {
      if (!tender.name || !tender.start_price || !tender.submission_deadline) {
        return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞, –¥–µ–¥–ª–∞–π–Ω';
      }
    }

    // –ü–æ–±–µ–¥–∞ ‚Üí –í —Ä–∞–±–æ—Ç–µ: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –ø–æ–±–µ–¥—ã
    if (tender.status === '–ø–æ–±–µ–¥–∞' && newStatus === '–≤ —Ä–∞–±–æ—Ç–µ') {
      if (!tender.win_price) {
        return '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª–µ "–¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã" –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ —Ä–∞–±–æ—Ç—É';
      }
    }

    return null;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
  const handleStatusClick = (newStatus: Tender['status']) => {
    const error = validateTransition(newStatus);
    if (error) {
      setValidationError(error);
      setIsDialogOpen(true);
      setSelectedStatus(null);
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ "–ü–æ–¥–∞–Ω–æ" - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–∞—á–∏
    if (newStatus === '–ø–æ–¥–∞–Ω–æ') {
      setSelectedStatus(newStatus);
      setValidationError('');
      setIsDialogOpen(true);
      return;
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –≤ "–ü–æ–±–µ–¥–∞" - –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ü–µ–Ω—É –ø–æ–±–µ–¥—ã
    if (newStatus === '–ø–æ–±–µ–¥–∞') {
      setSelectedStatus(newStatus);
      setValidationError('');
      setIsDialogOpen(true);
      return;
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    setSelectedStatus(newStatus);
    setValidationError('');
    setIsDialogOpen(true);
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
  const handleConfirm = async () => {
    if (!selectedStatus) return;

    setIsProcessing(true);

    try {
      const additionalData: Partial<Tender> = {};

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞
      switch (selectedStatus) {
        case '–ø–æ–¥–∞–Ω–æ':
          // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø–æ–¥–∞—á–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–∞—á–∏
          additionalData.submission_date = new Date().toISOString().split('T')[0];
          if (submittedPrice) {
            additionalData.submitted_price = parseFloat(submittedPrice);
          }
          // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ü–æ–¥–∞–Ω–æ"
          await onStatusChange(tender.id, selectedStatus, additionalData);
          
          // –ó–∞—Ç–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
          await onStatusChange(tender.id, '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏', {});
          
          setIsDialogOpen(false);
          setSelectedStatus(null);
          setSubmittedPrice('');
          showNotification('–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏');
          setIsProcessing(false);
          return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∫–æ–¥ –Ω–∏–∂–µ

        case '–ø–æ–±–µ–¥–∞':
          // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–±–µ–¥—ã
          if (winPrice) {
            additionalData.win_price = parseFloat(winPrice);
          }
          break;

        case '–≤ —Ä–∞–±–æ—Ç–µ':
          // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω—ã –ø–æ–±–µ–¥—ã
          if (!tender.win_price) {
            setValidationError('–¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
            setIsProcessing(false);
            return;
          }
          break;
      }

      await onStatusChange(tender.id, selectedStatus, additionalData);
      
      setIsDialogOpen(false);
      setSelectedStatus(null);
      setWinPrice('');
      setSubmittedPrice('');
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      showNotification(selectedStatus);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞:', error);
      setValidationError('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞');
    } finally {
      setIsProcessing(false);
    }
  };

  // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showNotification = (status: Tender['status']) => {
    const messages: Record<Tender['status'], string> = {
      '–Ω–æ–≤—ã–π': '',
      '–ø–æ–¥–∞–Ω–æ': '‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞',
      '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': 'üëÄ –¢–µ–Ω–¥–µ—Ä –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
      '–ø–æ–±–µ–¥–∞': 'üéâ –¢–µ–Ω–¥–µ—Ä –≤—ã–∏–≥—Ä–∞–Ω!',
      '–≤ —Ä–∞–±–æ—Ç–µ': 'üîß –¢–µ–Ω–¥–µ—Ä –≤ —Ä–∞–±–æ—Ç–µ',
      '–∑–∞–≤–µ—Ä—à—ë–Ω': '‚úÖ –¢–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω',
      '–ø—Ä–æ–∏–≥—Ä—ã—à': '‚ùå –¢–µ–Ω–¥–µ—Ä –ø—Ä–æ–∏–≥—Ä–∞–Ω',
    };

    const message = messages[status];
    if (message) {
      // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å toast –∏–ª–∏ alert
      alert(message);
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusColor = (status: Tender['status']) => {
    switch (status) {
      case '–ø–æ–¥–∞–Ω–æ':
        return 'bg-blue-600 hover:bg-blue-700';
      case '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏':
        return 'bg-purple-600 hover:bg-purple-700';
      case '–ø–æ–±–µ–¥–∞':
        return 'bg-green-600 hover:bg-green-700';
      case '–≤ —Ä–∞–±–æ—Ç–µ':
        return 'bg-orange-600 hover:bg-orange-700';
      case '–∑–∞–≤–µ—Ä—à—ë–Ω':
        return 'bg-gray-600 hover:bg-gray-700';
      case '–ø—Ä–æ–∏–≥—Ä—ã—à':
        return 'bg-red-600 hover:bg-red-700';
      default:
        return 'bg-blue-600 hover:bg-blue-700';
    }
  };

  // –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
  const getStatusIcon = (status: Tender['status']) => {
    switch (status) {
      case '–ø–æ–±–µ–¥–∞':
      case '–∑–∞–≤–µ—Ä—à—ë–Ω':
        return <CheckCircle className="h-4 w-4" />;
      case '–ø—Ä–æ–∏–≥—Ä—ã—à':
        return <XCircle className="h-4 w-4" />;
      default:
        return <ArrowRight className="h-4 w-4" />;
    }
  };

  if (isFinished) {
    return (
      <div className="flex items-center gap-2 text-sm text-gray-500">
        <CheckCircle className="h-4 w-4" />
        <span>–§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å</span>
      </div>
    );
  }

  return (
    <>
      <div className="flex flex-wrap gap-2">
        {availableTransitions.map((nextStatus) => {
          // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –ü–æ–±–µ–¥–∞/–ü—Ä–æ–∏–≥—Ä—ã—à
          if (nextStatus === '–ø–æ–±–µ–¥–∞') {
            return (
              <button
                key={nextStatus}
                onClick={() => handleStatusClick(nextStatus)}
                className="inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium text-green-700 bg-green-50 hover:bg-green-100 border border-green-200 rounded-md transition-colors"
              >
                <CheckCircle className="h-3.5 w-3.5" />
                –ü–æ–±–µ–¥–∞
              </button>
            );
          }
          if (nextStatus === '–ø—Ä–æ–∏–≥—Ä—ã—à') {
            return (
              <button
                key={nextStatus}
                onClick={() => handleStatusClick(nextStatus)}
                className="inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium text-red-700 bg-red-50 hover:bg-red-100 border border-red-200 rounded-md transition-colors"
              >
                <XCircle className="h-3.5 w-3.5" />
                –ü—Ä–æ–∏–≥—Ä—ã—à
              </button>
            );
          }
          // –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å
          const colorMap: Record<Tender['status'], string> = {
            '–Ω–æ–≤—ã–π': 'text-blue-700 bg-blue-50 hover:bg-blue-100 border-blue-200',
            '–ø–æ–¥–∞–Ω–æ': 'text-indigo-700 bg-indigo-50 hover:bg-indigo-100 border-indigo-200',
            '–Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏': 'text-purple-700 bg-purple-50 hover:bg-purple-100 border-purple-200',
            '–ø–æ–±–µ–¥–∞': 'text-green-700 bg-green-50 hover:bg-green-100 border-green-200',
            '–≤ —Ä–∞–±–æ—Ç–µ': 'text-orange-700 bg-orange-50 hover:bg-orange-100 border-orange-200',
            '–∑–∞–≤–µ—Ä—à—ë–Ω': 'text-gray-700 bg-gray-50 hover:bg-gray-100 border-gray-200',
            '–ø—Ä–æ–∏–≥—Ä—ã—à': 'text-red-700 bg-red-50 hover:bg-red-100 border-red-200',
          };
          return (
            <button
              key={nextStatus}
              onClick={() => handleStatusClick(nextStatus)}
              className={cn(
                'inline-flex items-center gap-1.5 px-3 py-1.5 text-xs font-medium border rounded-md transition-colors',
                colorMap[nextStatus]
              )}
            >
              {getStatusIcon(nextStatus)}
              {STATUS_LABELS[nextStatus]}
            </button>
          );
        })}
      </div>

      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>
              {validationError ? (
                <div className="flex items-center gap-2 text-red-600">
                  <AlertCircle className="h-5 w-5" />
                  –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                </div>
              ) : (
                `–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞ "${selectedStatus ? STATUS_LABELS[selectedStatus] : ''}"`
              )}
            </DialogTitle>
            <DialogDescription>
              {validationError || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–Ω–¥–µ—Ä–∞'}
            </DialogDescription>
          </DialogHeader>

          {!validationError && selectedStatus === '–ø–æ–¥–∞–Ω–æ' && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="submitted_price">–¶–µ–Ω–∞ –ø–æ–¥–∞—á–∏ (‚ÇΩ) *</Label>
                <Input
                  id="submitted_price"
                  type="number"
                  value={submittedPrice}
                  onChange={(e) => setSubmittedPrice(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ –∫–æ—Ç–æ—Ä–æ–π –ø–æ–¥–∞–ª–∏"
                  required
                />
                <p className="text-sm text-gray-500">
                  –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ –∫–æ—Ç–æ—Ä–æ–π –≤—ã –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ–Ω–¥–µ—Ä
                </p>
                <p className="text-sm text-blue-600 font-medium">
                  ‚ÑπÔ∏è –ü–æ—Å–ª–µ –ø–æ–¥–∞—á–∏ —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–º–µ–Ω–∏—Ç—Å—è –Ω–∞ "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
                </p>
              </div>
            </div>
          )}

          {!validationError && selectedStatus === '–ø–æ–±–µ–¥–∞' && (
            <div className="grid gap-4 py-4">
              <div className="grid gap-2">
                <Label htmlFor="win_price">–¶–µ–Ω–∞ –ø–æ–±–µ–¥—ã (‚ÇΩ) *</Label>
                <Input
                  id="win_price"
                  type="number"
                  value={winPrice}
                  onChange={(e) => setWinPrice(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–±–µ–¥—ã"
                  required
                />
                <p className="text-sm text-gray-500">
                  –≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Å—Ç–∞—Ç—É—Å "–ü–æ–±–µ–¥–∞"
                </p>
              </div>
            </div>
          )}

          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={() => {
                setIsDialogOpen(false);
                setSelectedStatus(null);
                setWinPrice('');
                setSubmittedPrice('');
                setValidationError('');
              }}
            >
              {validationError ? '–ó–∞–∫—Ä—ã—Ç—å' : '–û—Ç–º–µ–Ω–∞'}
            </Button>
            {!validationError && (
              <Button
                onClick={handleConfirm}
                disabled={
                  isProcessing || 
                  (selectedStatus === '–ø–æ–¥–∞–Ω–æ' && !submittedPrice) ||
                  (selectedStatus === '–ø–æ–±–µ–¥–∞' && !winPrice)
                }
              >
                {isProcessing ? '–û–±—Ä–∞–±–æ—Ç–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}
